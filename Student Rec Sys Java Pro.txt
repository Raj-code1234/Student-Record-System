// Program to build a simple Menu-Driven Program for Student Record System.

import java.util.ArrayList; //Imports the ArrayList class from the java.util package, which allows us to create dynamic arrays.
import java.util.Scanner;   //Imports the Scanner class from the java.util package, which allows us to take input from the user.


// Defines a new class named Student

class Student {          
    private String id;   //Access modifier that makes variables and methods accessible only within the declared class.
    private String name;
    private String course;
    private int marks;

    public Student(String id, String name, String course, int marks) {
        this.id = id;
        this.name = name;
        this.course = course;
        this.marks = marks;
    }

    public String getId() {    //Methods like getId, getName, etc., return the corresponding private attributes.
        return id;
    }

    public String getName() {
        return name;
    }

    public String getCourse() {
        return course;
    }

    public int getMarks() {
        return marks;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setCourse(String course) {
        this.course = course;
    }

    public void setMarks(int marks) {
        this.marks = marks;
    }

    public void displayStudent() {
        System.out.println("ID: " + id);
        System.out.println("Name: " + name);
        System.out.println("Course: " + course);
        System.out.println("Marks: " + marks);
    }
}


// Define the main StudentRecordSystem class

public class StudentRecordSystem {                            //the main class that manages student records.
    private ArrayList<Student> students = new ArrayList<>();    //A dynamic array to store student objects.
    private Scanner scanner = new Scanner(System.in);        //Used to take user input.

    public static void main(String[] args) {                  //The entry point of the Java application.
        StudentRecordSystem srs = new StudentRecordSystem();  // Creates an instance of StudentRecordSystem and calls the run method.
        srs.run();                                            
    }
    
     // Run the menu-driven system

    public void run() {
        while (true) {                                     // infinite loop that displays the menu and performs operations based on user input.
            System.out.println("\n1. Insert new Student");
            System.out.println("2. Search any Student");
            System.out.println("3. Update academic records");
            System.out.println("4. Modify Student Record");
            System.out.println("5. Generate Mark sheet");
            System.out.println("6. Delete Student Record");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {                           //switch statement that executes different methods based on user choice.
                case 1:
                    insertStudent();
                    break;
                case 2:
                    searchStudent();
                    break;
                case 3:
                    updateAcademicRecords();
                    break;
                case 4:
                    modifyStudentRecord();
                    break;
                case 5:
                    generateMarkSheet();
                    break;
                case 6:
                    deleteStudentRecord();
                    break;
                case 7:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
    
    // insert a new student

    private void insertStudent() {    //Method to insert a new student.Takes input for student details,creates a new Student object and adds it to the list.
       
        System.out.print("Enter Student ID: ");
        String id = scanner.nextLine();
        System.out.print("Enter Student Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Student Course: ");
        String course = scanner.nextLine();
        System.out.print("Enter Student Marks: ");
        int marks = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        Student student = new Student(id, name, course, marks);
        students.add(student);
        System.out.println("Student added successfully.");
    }
    
     // Search and display a student by ID

    private void searchStudent() {      //Method to search for a student by ID.Iterates through the students list and displays the student details if found.
      
        System.out.print("Enter Student ID to search: ");
        String id = scanner.nextLine();
        for (Student student : students) {
            if (student.getId().equalsIgnoreCase(id)) {
                student.displayStudent();
                return;
            }
        }
        System.out.println("Student not found.");
    }
    
// Update academic records for a student

    private void updateAcademicRecords() {     //Method to update a student's marks. Finds the student by ID and updates their marks.
        
        System.out.print("Enter Student ID to update records: ");
        String id = scanner.nextLine();
        for (Student student : students) {
            if (student.getId().equalsIgnoreCase(id)) {
                System.out.print("Enter new marks: ");
                int marks = scanner.nextInt();
                scanner.nextLine(); // Consume newline
                student.setMarks(marks);
                System.out.println("Academic records updated successfully.");
                return;
            }
        }
        System.out.println("Student not found.");
    }
    
    // Modify student details

    private void modifyStudentRecord() {          //Method to modify a student's details. Updates the student's name, course, and marks.  
        
        System.out.print("Enter Student ID to modify: ");
        String id = scanner.nextLine();
        for (Student student : students) {
            if (student.getId().equalsIgnoreCase(id)) {
                System.out.print("Enter new name: ");
                String name = scanner.nextLine();
                System.out.print("Enter new course: ");
                String course = scanner.nextLine();
                System.out.print("Enter new marks: ");
                int marks = scanner.nextInt();
                scanner.nextLine(); // Consume newline
                student.setName(name);
                student.setCourse(course);
                student.setMarks(marks);
                System.out.println("Student record modified successfully.");
                return;
            }
        }
        System.out.println("Student not found.");
    }
    
    // Generate and display mark sheet for a student

    private void generateMarkSheet() {                   //Method to generate and display a mark sheet for a student by ID.
       
        System.out.print("Enter Student ID to generate mark sheet: ");
        String id = scanner.nextLine();
        for (Student student : students) {
            if (student.getId().equalsIgnoreCase(id)) {
                System.out.println("\n--- Mark Sheet ---");
                student.displayStudent();
                System.out.println("------------------");
                return;
            }
        }
        System.out.println("Student not found.");
    }

 // Remove a student record

    private void deleteStudentRecord() {                //Method to delete a student record by ID.
        System.out.print("Enter Student ID to delete: ");
        String id = scanner.nextLine();
        for (Student student : students) {
            if (student.getId().equalsIgnoreCase(id)) {
                students.remove(student);
                System.out.println("Student record deleted successfully.");
                return;
            }
        }
        System.out.println("Student not found.");
    }
}